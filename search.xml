<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>总结java反射(一)</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2019/03/17/Ae4vG9.md.jpg" alt="古明地觉"></p><h1 id="反射"><a href="#反射" class="headerlink" title="反射:"></a><strong>反射</strong>:</h1><p>反射库是java中能够动态的操纵java代码的程序，这种能分析类能力的程序被称为反射(reflective).<br>那么反射具体有哪些反射机制呢？</p><p>首先来说Class类<br><a id="more"></a></p><h2 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h2><p>在程序运行期间，有着记录对象所属的类的信息的类，那就是Class类。</p><hr><h3 id="四个重要方法"><a href="#四个重要方法" class="headerlink" title="四个重要方法:"></a>四个重要方法:</h3><p>Object类中有一个方法<code>getClass()</code> ，它能返回Class类型的实例：<br>现在让我们来创建一个简单的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sword;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sword</span></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> level;  <span class="comment">//🗡的等级</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> durability;  <span class="comment">//🗡的耐久度</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> attack;  <span class="comment">//🗡的攻击力</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Sword</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.level=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">this</span>.durability=<span class="number">150</span>;</span><br><span class="line">     <span class="keyword">this</span>.attack=<span class="number">150</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLevel</span><span class="params">()</span> </span>&#123; <span class="comment">//获取等级</span></span><br><span class="line">     <span class="keyword">return</span> level;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDurability</span><span class="params">()</span> </span>&#123;  <span class="comment">//获取耐久度</span></span><br><span class="line">     <span class="keyword">return</span> durability;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAttack</span><span class="params">()</span> </span>&#123;  <span class="comment">//获取攻击力</span></span><br><span class="line">     <span class="keyword">return</span> attack;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strenthen</span><span class="params">()</span> </span>&#123;  <span class="comment">//强化🗡的等级</span></span><br><span class="line">     <span class="keyword">int</span> random=(<span class="keyword">int</span>) (Math.random()+<span class="number">1</span>);</span><br><span class="line">     level+=random;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们简单的建完了我们的<code>🗡</code>类。</p><hr><p>接下来我们用<code>getClass()</code>方法获取剑的Class类的实例。<br><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Sword</span> s=<span class="function"><span class="keyword">new</span> <span class="title">Sword</span>();</span></span><br><span class="line"><span class="function"><span class="title">Class</span> <span class="title">cl</span>=<span class="title">s</span>.<span class="title">getClass</span>();</span></span><br><span class="line"><span class="function"><span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(s.getClass().<span class="title">getName</span>());  <span class="comment">//输出结果为sword.Sword</span></span></span><br></pre></td></tr></table></figure></p><p>以上我们用到了Class类最常用的方法，<code>getName()</code>,它用来返回类的名字.格式为<code>包名.类名</code>.</p><hr><p>如果我们要在程序运行期间读取Class对象，我们可以使用Class类中的<code>forName()</code>方法：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  String className=<span class="string">"sword.Sword"</span>;</span><br><span class="line">  <span class="keyword">Class</span> cl=<span class="keyword">Class</span>.forName(className);</span><br><span class="line">  System.out.<span class="keyword">println</span>(cl.getName()); <span class="comment">//输出同上</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意上面使用try块来检查异常，原因是因为className可能为<code>不存在</code>的类.</p><hr><p>反射库中还有一个非常实用的方法newInstance(),它用来创建一个类的实例。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">s</span><span class="selector-class">.getClass</span>()<span class="selector-class">.newInstance</span>();</span><br></pre></td></tr></table></figure></p><p>不过<code>newInstance()</code>方法需要调用默认的构造器，如果这个类没有默认的构造器，就会<code>抛出一个异常</code></p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><em><code>java.lang.Class</code></em><br>1.static Class forName(String className)<br>  <code>返回描述类名为className的Class对象。</code><br>2.Object newInstance()<br>  <code>返回这个类的一个新实例。</code><br>3.Class getClass()<br>  <code>返回这个类的Class对象。</code><br>4.String getName()<br>  <code>返回该Class对象的类名。</code></p><hr><p>待续</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
