<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>总结java反射(二)</title>
      <link href="/reflect2/"/>
      <url>/reflect2/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2019/03/23/AGMjBR.jpg" alt="AGMjBR.jpg"><br><a id="more"></a></p><h1 id="分析类能力"><a href="#分析类能力" class="headerlink" title="分析类能力:"></a>分析类能力:</h1><p>在上一章简略(十分简略)的介绍了反射的机制,那么这一节我们具体介绍反射机制的重要内容—-<code>检查类的结构</code>.</p><hr><p>要了解java中类的结构，我们都知道类包括三个结构:<code>Field(数据域:常量，全局变量),Method(类方法),Constructor(类构造器)</code>.</p><p>好的，我们偷懒复制上一节的🗡类来做个例子:</p><hr><p>以下是🗡的数据域：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> level;  <span class="comment">//🗡的等级</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> durability;  <span class="comment">//🗡的耐久度</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> attack;  <span class="comment">//🗡的攻击力</span></span><br></pre></td></tr></table></figure></p><hr><p>以下是🗡的类方法:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLevel</span><span class="params">()</span> </span>&#123; <span class="comment">//获取等级</span></span><br><span class="line">  <span class="keyword">return</span> level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDurability</span><span class="params">()</span> </span>&#123;  <span class="comment">//获取耐久度</span></span><br><span class="line">  <span class="keyword">return</span> durability;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAttack</span><span class="params">()</span> </span>&#123;  <span class="comment">//获取攻击力</span></span><br><span class="line">  <span class="keyword">return</span> attack;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strenthen</span><span class="params">()</span> </span>&#123;  <span class="comment">//强化🗡的等级</span></span><br><span class="line">  <span class="keyword">int</span> random=(<span class="keyword">int</span>) (Math.random()+<span class="number">1</span>);</span><br><span class="line">  level+=random;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>以下是🗡的构造器:<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Sword()&#123;</span><br><span class="line">  <span class="keyword">this</span>.level=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">this</span>.durability=<span class="number">150</span>;</span><br><span class="line">  <span class="keyword">this</span>.attack=<span class="number">150</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>那么我们如何用反射机制来获得🗡类的结构呢?</p><h2 id="reflect包"><a href="#reflect包" class="headerlink" title="reflect包:"></a>reflect包:</h2><p>在java.lang.reflect包中有三个类Field,Method和Constructor分别用于描述类的域，方法和构造器.<br>具体来看它们之间的关系:<br><a href="https://imgchr.com/i/AGMl01" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/23/AGMl01.md.png" alt="AGMl01.md.png"></a><br>可以看到Field,Method,Constructor都继承AccesibleObject类，并实现Number接口。</p><p>首先我们来看它们的共同父类<code>AccessibleObject</code>类:</p><h3 id="AccessibleObject类"><a href="#AccessibleObject类" class="headerlink" title="AccessibleObject类:"></a><em>AccessibleObject类</em>:</h3><p>它有最常用且核心的三个方法:<br>1.<code>void setAccesible(boolean flag)</code><br>为反射的对象设置可访问标志.flag为true表明屏蔽Java语言的访问检查，使得对象的私有属性也可以被查询和设置.<br>也就是说可以篡改🗡的等级和耐久度了(如此病态)<br>2.<code>boolean isAccessible()</code><br>返回反射对象的可访问标志的值.是private就返回false,是public就返回true.<br>3.<code>static void setAccesible(AccessibleObject[] array,boolean flag)</code><br>这个就更狠了，静态方法，能够快捷地对对象数组设置可访问标志</p><hr><p>简单了解了AccessibleObject类后，我们来看它们都实现的接口:Number.</p><h3 id="Number接口"><a href="#Number接口" class="headerlink" title="Number接口:"></a><em>Number接口</em>:</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> Member&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *表明一个类或接口中所有公共成员的集合</span></span><br><span class="line"><span class="comment">    *包括继承(派生)的成员</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="keyword">PUBLIC</span> = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *表明一个类或接口中声明成员的集合</span></span><br><span class="line"><span class="comment">    *不包括继承(派生)的成员</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DECLARED = <span class="number">1</span>;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回实现了该接口的类或接口的Class类对象(参考第一节所提到的Class类)</span></span><br><span class="line"><span class="comment">     * 并声明成员或构造器.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">Class</span>&lt;?&gt; getDeclaringClass();</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回实现该接口的成员或构造器的名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="keyword">public</span> String getName();</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回Java语言中对成员或构造器的解析值(int常量).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> getModifiers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码摘抄自JavaSE-10的源码.<br>我们着重看<code>getModifiers()</code>这个方法，它返回一个类或接口的解析int值，那它具体代表什么呢?<br>这里就不得不要提到一个解析类<code>Modifier</code>:</p><h3 id="Modifier类"><a href="#Modifier类" class="headerlink" title="Modifier类:"></a><em>Modifier类</em>:</h3><p>首先看Modifier类中的常量部分<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="keyword">PUBLIC</span>       = <span class="number">0</span>x00000001;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="keyword">PRIVATE</span>      = <span class="number">0</span>x00000002;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="keyword">PROTECTED</span>    = <span class="number">0</span>x00000004;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="keyword">STATIC</span>       = <span class="number">0</span>x00000008;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="keyword">FINAL</span>        = <span class="number">0</span>x00000010;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="keyword">SYNCHRONIZED</span> = <span class="number">0</span>x00000020;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="keyword">VOLATILE</span>     = <span class="number">0</span>x00000040;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="keyword">TRANSIENT</span>    = <span class="number">0</span>x00000080;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="keyword">NATIVE</span>       = <span class="number">0</span>x00000100;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="keyword">INTERFACE</span>    = <span class="number">0</span>x00000200;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="keyword">ABSTRACT</span>     = <span class="number">0</span>x00000400;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STRICT       = <span class="number">0</span>x00000800;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BRIDGE    = <span class="number">0</span>x00000040;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VARARGS   = <span class="number">0</span>x00000080;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SYNTHETIC = <span class="number">0</span>x00001000;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ANNOTATION  = <span class="number">0</span>x00002000;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ENUM      = <span class="number">0</span>x00004000;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MANDATED  = <span class="number">0</span>x00008000;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CLASS_MODIFIERS =</span><br><span class="line">        Modifier.<span class="keyword">PUBLIC</span>         | Modifier.<span class="keyword">PROTECTED</span>    | Modifier.<span class="keyword">PRIVATE</span> |</span><br><span class="line">        Modifier.<span class="keyword">ABSTRACT</span>       | Modifier.<span class="keyword">STATIC</span>       | Modifier.<span class="keyword">FINAL</span>   |</span><br><span class="line">        Modifier.STRICT;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERFACE_MODIFIERS =</span><br><span class="line">        Modifier.<span class="keyword">PUBLIC</span>         | Modifier.<span class="keyword">PROTECTED</span>    | Modifier.<span class="keyword">PRIVATE</span> |</span><br><span class="line">        Modifier.<span class="keyword">ABSTRACT</span>       | Modifier.<span class="keyword">STATIC</span>       | Modifier.STRICT;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONSTRUCTOR_MODIFIERS =</span><br><span class="line">        Modifier.<span class="keyword">PUBLIC</span>         | Modifier.<span class="keyword">PROTECTED</span>    | Modifier.<span class="keyword">PRIVATE</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> METHOD_MODIFIERS =</span><br><span class="line">        Modifier.<span class="keyword">PUBLIC</span>         | Modifier.<span class="keyword">PROTECTED</span>    | Modifier.<span class="keyword">PRIVATE</span> |</span><br><span class="line">        Modifier.<span class="keyword">ABSTRACT</span>       | Modifier.<span class="keyword">STATIC</span>       | Modifier.<span class="keyword">FINAL</span>   |</span><br><span class="line">        Modifier.<span class="keyword">SYNCHRONIZED</span>   | Modifier.<span class="keyword">NATIVE</span>       | Modifier.STRICT;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FIELD_MODIFIERS =</span><br><span class="line">        Modifier.<span class="keyword">PUBLIC</span>         | Modifier.<span class="keyword">PROTECTED</span>    | Modifier.<span class="keyword">PRIVATE</span> |</span><br><span class="line">        Modifier.<span class="keyword">STATIC</span>         | Modifier.<span class="keyword">FINAL</span>        | Modifier.<span class="keyword">TRANSIENT</span> |</span><br><span class="line">        Modifier.<span class="keyword">VOLATILE</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PARAMETER_MODIFIERS =</span><br><span class="line">        Modifier.<span class="keyword">FINAL</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ACCESS_MODIFIERS =</span><br><span class="line">        Modifier.<span class="keyword">PUBLIC</span> | Modifier.<span class="keyword">PROTECTED</span> | Modifier.<span class="keyword">PRIVATE</span>;</span><br></pre></td></tr></table></figure></p><p>可以看出每一个类型都有对应的16进制int值对应,并通过:<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isPublic(<span class="keyword">int</span> <span class="keyword">mod</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">mod</span> &amp; PUBLIC) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isPrivate(<span class="keyword">int</span> <span class="keyword">mod</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">mod</span> &amp; PRIVATE) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isProtected(<span class="keyword">int</span> <span class="keyword">mod</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">mod</span> &amp; PROTECTED) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isStatic(<span class="keyword">int</span> <span class="keyword">mod</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">mod</span> &amp; STATIC) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isFinal(<span class="keyword">int</span> <span class="keyword">mod</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">mod</span> &amp; FINAL) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isSynchronized(<span class="keyword">int</span> <span class="keyword">mod</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">mod</span> &amp; SYNCHRONIZED) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isVolatile(<span class="keyword">int</span> <span class="keyword">mod</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">mod</span> &amp; VOLATILE) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isTransient(<span class="keyword">int</span> <span class="keyword">mod</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">mod</span> &amp; TRANSIENT) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isNative(<span class="keyword">int</span> <span class="keyword">mod</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">mod</span> &amp; NATIVE) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isInterface(<span class="keyword">int</span> <span class="keyword">mod</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">mod</span> &amp; INTERFACE) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isAbstract(<span class="keyword">int</span> <span class="keyword">mod</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">mod</span> &amp; ABSTRACT) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isStrict(<span class="keyword">int</span> <span class="keyword">mod</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">mod</span> &amp; STRICT) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">···</span><br></pre></td></tr></table></figure></p><p>一系列判断的静态方法，来确定类型(返回值,类,接口,常量类型).<br>最后通过toString()方法打印:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static String toString(int mod) &#123;</span><br><span class="line">        StringJoiner sj = new StringJoiner(<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((mod &amp; PUBLIC) != 0)        sj.<span class="builtin-name">add</span>(<span class="string">"public"</span>);</span><br><span class="line">        <span class="keyword">if</span> ((mod &amp; PROTECTED) != 0)     sj.<span class="builtin-name">add</span>(<span class="string">"protected"</span>);</span><br><span class="line">        <span class="keyword">if</span> ((mod &amp; PRIVATE) != 0)       sj.<span class="builtin-name">add</span>(<span class="string">"private"</span>);</span><br><span class="line">        <span class="keyword">if</span> ((mod &amp; ABSTRACT) != 0)      sj.<span class="builtin-name">add</span>(<span class="string">"abstract"</span>);</span><br><span class="line">        <span class="keyword">if</span> ((mod &amp; STATIC) != 0)        sj.<span class="builtin-name">add</span>(<span class="string">"static"</span>);</span><br><span class="line">        <span class="keyword">if</span> ((mod &amp; FINAL) != 0)         sj.<span class="builtin-name">add</span>(<span class="string">"final"</span>);</span><br><span class="line">        <span class="keyword">if</span> ((mod &amp; TRANSIENT) != 0)     sj.<span class="builtin-name">add</span>(<span class="string">"transient"</span>);</span><br><span class="line">        <span class="keyword">if</span> ((mod &amp; VOLATILE) != 0)      sj.<span class="builtin-name">add</span>(<span class="string">"volatile"</span>);</span><br><span class="line">        <span class="keyword">if</span> ((mod &amp; SYNCHRONIZED) != 0)  sj.<span class="builtin-name">add</span>(<span class="string">"synchronized"</span>);</span><br><span class="line">        <span class="keyword">if</span> ((mod &amp; NATIVE) != 0)        sj.<span class="builtin-name">add</span>(<span class="string">"native"</span>);</span><br><span class="line">        <span class="keyword">if</span> ((mod &amp; STRICT) != 0)        sj.<span class="builtin-name">add</span>(<span class="string">"strictfp"</span>);</span><br><span class="line">        <span class="keyword">if</span> ((mod &amp; INTERFACE) != 0)     sj.<span class="builtin-name">add</span>(<span class="string">"interface"</span>);</span><br><span class="line"></span><br><span class="line">        return sj.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="Field类"><a href="#Field类" class="headerlink" title="Field类:"></a><em>Field类</em>:</h3><p><code>Field[] getFields()</code><br><code>Field[] getDeclaredFields()</code><br>getFields方法返回一个包含Field对象的数组，记录这个类或其超类的公有域。getDeclaredFields方法也返回包含Fields对象的数组，记录这个类的全部域。如果没有数据域，则将返回一个长度为0的数组。<br><code>Class getType()</code><br>返回数据域对应类型的Class类<br>下面我们通过这些方法来获得🗡类的数据域</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> public static void main(String[] <span class="keyword">args</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> Sword s=new Sword();</span><br><span class="line"> <span class="keyword">Class</span> <span class="keyword">cl</span>=s.getClass();</span><br><span class="line"> String modifiers=Modifier.<span class="keyword">toString</span>(<span class="keyword">cl</span>.getModifiers());  <span class="comment">//通过解析器获得cl的访问类型.</span></span><br><span class="line"> <span class="keyword">if</span>(modifiers.<span class="built_in">length</span>()&gt;0) System.<span class="keyword">out</span>.<span class="keyword">print</span>(modifiers + <span class="string">" "</span> + <span class="keyword">cl</span>.getName()); <span class="comment">//输出🗡类名字</span></span><br><span class="line"> System.<span class="keyword">out</span>.<span class="keyword">print</span>(<span class="string">"\n&#123;\n"</span>);</span><br><span class="line"> printFields(<span class="keyword">cl</span>);  <span class="comment">//打印🗡类的数据域</span></span><br><span class="line"> System.<span class="keyword">out</span>.<span class="keyword">print</span>(<span class="string">"\n&#125;\n"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">public static void printFields(<span class="keyword">Class</span> <span class="keyword">cl</span>)</span><br><span class="line">&#123;</span><br><span class="line"> Field[] fields=<span class="keyword">cl</span>.getDeclaredFields();  <span class="comment">//获得🗡类的全部数据域</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span>(Field f:fields)  <span class="comment">//遍历每个数据</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">Class</span> <span class="keyword">type</span>=f.getType();  <span class="comment">//获得数据类型的Class对象</span></span><br><span class="line">  String name=f.getName();  <span class="comment">//获取数据的名字</span></span><br><span class="line">  System.<span class="keyword">out</span>.<span class="keyword">print</span>(<span class="string">"    "</span>);  </span><br><span class="line">  String modifiers=Modifier.<span class="keyword">toString</span>(f.getModifiers()); <span class="comment">//通过解析器获得cl的访问类型</span></span><br><span class="line">  <span class="keyword">if</span>(modifiers.<span class="built_in">length</span>()&gt;0) System.<span class="keyword">out</span>.<span class="keyword">print</span>(modifiers + <span class="string">" "</span>);</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="keyword">type</span>.getName() + <span class="string">" "</span> + name + <span class="string">";"</span>); <span class="comment">//输出对应类型和名字</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是输出结果<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> <span class="keyword"> public</span> core.Sword</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword"> private</span><span class="built_in"> int </span>level;</span><br><span class="line">   <span class="keyword"> private</span><span class="built_in"> int </span>durability;</span><br><span class="line">   <span class="built_in"> int </span>attack;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p><h3 id="Method类"><a href="#Method类" class="headerlink" title="Method类:"></a><em>Method类</em>:</h3><p>同样<br><code>Method[] getMethods()</code><br><code>Method[] getDeclaredMethods()</code><br>返回包含Method对象的数组：getMethods返回所有公有方法,包括从超类继承来的公有方法;getDeclaredMethods返回这个类或接口的全部方法，但不包括由超类继承来的方法<br><code>Class getReturnType()</code><br>描述方法返回类型的Class对象<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] <span class="keyword">args</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Sword s=new Sword(10,150,10);</span><br><span class="line">    <span class="keyword">Class</span> <span class="keyword">cl</span>=s.getClass();</span><br><span class="line">    String modifiers=Modifier.<span class="keyword">toString</span>(<span class="keyword">cl</span>.getModifiers());</span><br><span class="line">    <span class="keyword">if</span>(modifiers.<span class="built_in">length</span>()&gt;0) System.<span class="keyword">out</span>.<span class="keyword">print</span>(modifiers + <span class="string">" "</span> + <span class="keyword">cl</span>.getName());</span><br><span class="line">    System.<span class="keyword">out</span>.<span class="keyword">print</span>(<span class="string">"\n&#123;\n"</span>);</span><br><span class="line">    <span class="comment">//printFields(cl);</span></span><br><span class="line">    printMethods(<span class="keyword">cl</span>); <span class="comment">//打印方法</span></span><br><span class="line">    System.<span class="keyword">out</span>.<span class="keyword">print</span>(<span class="string">"\n&#125;\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">public static void printMethods(<span class="keyword">Class</span> <span class="keyword">cl</span>)</span><br><span class="line">&#123;</span><br><span class="line">Method[] methods=<span class="keyword">cl</span>.getDeclaredMethods(); <span class="comment">//获得所有声明的方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Method <span class="keyword">m</span>:methods)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">Class</span> retType=<span class="keyword">m</span>.getReturnType(); <span class="comment">//获得方法的返回值类型</span></span><br><span class="line">String name=<span class="keyword">m</span>.getName();  <span class="comment">//获取方法名</span></span><br><span class="line"></span><br><span class="line">System.<span class="keyword">out</span>.<span class="keyword">print</span>(<span class="string">"    "</span>);</span><br><span class="line">String modifiers=Modifier.<span class="keyword">toString</span>(<span class="keyword">m</span>.getModifiers()); <span class="comment">//获取访问权限</span></span><br><span class="line"><span class="keyword">if</span>(modifiers.<span class="built_in">length</span>()&gt;0) System.<span class="keyword">out</span>.<span class="keyword">print</span>(modifiers+<span class="string">" "</span>);  <span class="comment">//打印访问权限</span></span><br><span class="line">System.<span class="keyword">out</span>.<span class="keyword">print</span>(retType.getName() + <span class="string">" "</span> +name + <span class="string">"("</span>);  <span class="comment">//打印方法名和返回类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Class</span>[] paramTypes = <span class="keyword">m</span>.getParameterTypes();  <span class="comment">//取得方法的参数</span></span><br><span class="line"><span class="keyword">for</span>(int j=0;j&lt;paramTypes.length;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j&gt;0) System.<span class="keyword">out</span>.<span class="keyword">print</span>(<span class="string">", "</span>);</span><br><span class="line">System.<span class="keyword">out</span>.<span class="keyword">print</span>(paramTypes[j].getName()); <span class="comment">//打印参数</span></span><br><span class="line">&#125;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">");"</span>);</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//输出结果</span></span><br><span class="line">  <span class="comment">//public core.Sword</span></span><br><span class="line">  <span class="comment">//&#123;</span></span><br><span class="line">      <span class="comment">//public int getAttack();</span></span><br><span class="line">      <span class="comment">//public void strenthen();</span></span><br><span class="line">      <span class="comment">//public int getDurability();</span></span><br><span class="line">      <span class="comment">//public int getLevel();</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure></p><hr><h3 id="Constructor类"><a href="#Constructor类" class="headerlink" title="Constructor类:"></a><em>Constructor类</em>:</h3><p><code>Constructor[] getConstructors()</code><br><code>Constructor[] getDeclaredConstructors()</code></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] <span class="keyword">args</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Sword s=new Sword(10,150,10);</span><br><span class="line">    <span class="keyword">Class</span> <span class="keyword">cl</span>=s.getClass();</span><br><span class="line">    String modifiers=Modifier.<span class="keyword">toString</span>(<span class="keyword">cl</span>.getModifiers());</span><br><span class="line">    <span class="keyword">if</span>(modifiers.<span class="built_in">length</span>()&gt;0) System.<span class="keyword">out</span>.<span class="keyword">print</span>(modifiers + <span class="string">" "</span> + <span class="keyword">cl</span>.getName());</span><br><span class="line">    System.<span class="keyword">out</span>.<span class="keyword">print</span>(<span class="string">"\n&#123;\n"</span>);</span><br><span class="line">    <span class="comment">//printFields(cl);</span></span><br><span class="line">    <span class="comment">//printMethods(cl);</span></span><br><span class="line">      printConstructors(<span class="keyword">cl</span>);  <span class="comment">//打印构造器</span></span><br><span class="line">    System.<span class="keyword">out</span>.<span class="keyword">print</span>(<span class="string">"\n&#125;\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">public static void printConstructors(<span class="keyword">Class</span> <span class="keyword">cl</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Constructor[] constructors=<span class="keyword">cl</span>.getDeclaredConstructors(); <span class="comment">//获取所有声明的构造器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(Constructor c:constructors)</span><br><span class="line">    &#123;</span><br><span class="line">        String name=c.getName(); <span class="comment">//取得构造器名字</span></span><br><span class="line">        System.<span class="keyword">out</span>.<span class="keyword">print</span>(<span class="string">"    "</span>);</span><br><span class="line">            String modifiers=Modifier.<span class="keyword">toString</span>(c.getModifiers());  <span class="comment">//获取访问权限</span></span><br><span class="line">            <span class="keyword">if</span>(modifiers.<span class="built_in">length</span>()&gt;0) System.<span class="keyword">out</span>.<span class="keyword">print</span>(modifiers+<span class="string">" "</span>);</span><br><span class="line">            System.<span class="keyword">out</span>.<span class="keyword">print</span>(name + <span class="string">"("</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">Class</span>[] paramTypes=c.getParameterTypes(); <span class="comment">//获取参数</span></span><br><span class="line">            <span class="keyword">for</span>(int j=0;j&lt;paramTypes.length;j++)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;0) System.<span class="keyword">out</span>.<span class="keyword">print</span>(<span class="string">","</span>);</span><br><span class="line">            System.<span class="keyword">out</span>.<span class="keyword">print</span>(paramTypes[j].getName());  <span class="comment">//打印参数名</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">");"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//public core.Sword</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//public core.Sword(int,int,int);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><hr><p>以上是反射三个包的具体应用<br>下一章我们使用反射改写数组的复制代码.</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结java反射(一)</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2019/03/17/Ae4vG9.jpg" alt="古明地觉"><br><a id="more"></a></p><h1 id="反射"><a href="#反射" class="headerlink" title="反射:"></a><strong>反射</strong>:</h1><p>反射库是java中能够动态的操纵java代码的程序，这种能分析类能力的程序被称为反射(reflective).<br>那么反射具体有哪些反射机制呢？</p><p>首先来说Class类</p><h2 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h2><p>在程序运行期间，有着记录对象所属的类的信息的类，那就是Class类。</p><hr><h3 id="四个重要方法"><a href="#四个重要方法" class="headerlink" title="四个重要方法:"></a>四个重要方法:</h3><p>Object类中有一个方法<code>getClass()</code> ，它能返回Class类型的实例：<br>现在让我们来创建一个简单的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sword;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sword</span></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> level;  <span class="comment">//🗡的等级</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> durability;  <span class="comment">//🗡的耐久度</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> attack;  <span class="comment">//🗡的攻击力</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Sword</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.level=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">this</span>.durability=<span class="number">150</span>;</span><br><span class="line">     <span class="keyword">this</span>.attack=<span class="number">150</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLevel</span><span class="params">()</span> </span>&#123; <span class="comment">//获取等级</span></span><br><span class="line">     <span class="keyword">return</span> level;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDurability</span><span class="params">()</span> </span>&#123;  <span class="comment">//获取耐久度</span></span><br><span class="line">     <span class="keyword">return</span> durability;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAttack</span><span class="params">()</span> </span>&#123;  <span class="comment">//获取攻击力</span></span><br><span class="line">     <span class="keyword">return</span> attack;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strenthen</span><span class="params">()</span> </span>&#123;  <span class="comment">//强化🗡的等级</span></span><br><span class="line">     <span class="keyword">int</span> random=(<span class="keyword">int</span>) (Math.random()+<span class="number">1</span>);</span><br><span class="line">     level+=random;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们简单的建完了我们的<code>🗡</code>类。</p><hr><p>接下来我们用<code>getClass()</code>方法获取剑的Class类的实例。<br><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Sword</span> s=<span class="function"><span class="keyword">new</span> <span class="title">Sword</span>();</span></span><br><span class="line"><span class="function"><span class="title">Class</span> <span class="title">cl</span>=<span class="title">s</span>.<span class="title">getClass</span>();</span></span><br><span class="line"><span class="function"><span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(s.getClass().<span class="title">getName</span>());  <span class="comment">//输出结果为sword.Sword</span></span></span><br></pre></td></tr></table></figure></p><p>以上我们用到了Class类最常用的方法，<code>getName()</code>,它用来返回类的名字.格式为<code>包名.类名</code>.</p><hr><p>如果我们要在程序运行期间读取Class对象，我们可以使用Class类中的<code>forName()</code>方法：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  String className=<span class="string">"sword.Sword"</span>;</span><br><span class="line">  <span class="keyword">Class</span> cl=<span class="keyword">Class</span>.forName(className);</span><br><span class="line">  System.out.<span class="keyword">println</span>(cl.getName()); <span class="comment">//输出同上</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意上面使用try块来检查异常，原因是因为className可能为<code>不存在</code>的类.</p><hr><p>反射库中还有一个非常实用的方法newInstance(),它用来创建一个类的实例。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">s</span><span class="selector-class">.getClass</span>()<span class="selector-class">.newInstance</span>();</span><br></pre></td></tr></table></figure></p><p>不过<code>newInstance()</code>方法需要调用默认的构造器，如果这个类没有默认的构造器，就会<code>抛出一个异常</code></p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><em><code>java.lang.Class</code></em><br>1.static Class forName(String className)<br>  <code>返回描述类名为className的Class对象。</code><br>2.Object newInstance()<br>  <code>返回这个类的一个新实例。</code><br>3.Class getClass()<br>  <code>返回这个类的Class对象。</code><br>4.String getName()<br>  <code>返回该Class对象的类名。</code></p><hr><p>待续</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
